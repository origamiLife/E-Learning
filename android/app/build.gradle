plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.origami.academy"
    compileSdk = 35
    ndkVersion = "26.1.10909125"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.origami.academy"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 24
        targetSdk = 35
        versionCode = 1
        versionName = "1.0.2"
    }

    buildTypes {

        release {
            // ลดขนาด APK โดยเปิด ProGuard และตัดโค้ดที่ไม่ได้ใช้
            minifyEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")

            // ปรับโหมดการบีบอัด APK ให้ทำงานเร็วขึ้น
//            isDebuggable = false
//            isJniDebuggable = false
//            isRenderscriptDebuggable = false
            signingConfig = signingConfigs.debug // เปลี่ยนเป็น release key ถ้ามี
        }
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig = signingConfigs.debug
//        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true // แก้ปัญหา Failed to extract native libraries
        }
    }
}

flutter {
    source = "../.."
}